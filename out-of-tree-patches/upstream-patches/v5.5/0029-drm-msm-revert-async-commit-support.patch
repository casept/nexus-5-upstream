From cb12552dfc7788174d16ccecbefbcb1e43ec2765 Mon Sep 17 00:00:00 2001
From: Brian Masney <masneyb@onstation.org>
Date: Wed, 4 Mar 2020 19:21:18 -0500
Subject: [PATCH 29/29] drm/msm: revert async commit support

This patch reverts the following three commits that introduced async
commit support in the MSM driver:

    d934a712c5e6 ("drm/msm: add atomic traces")
    2d99ced787e3 ("drm/msm: async commit support")
    194fc68d7a49 ("drm/msm/dpu: async commit support")

Since this was introduced, the command mode panel on the Nexus 5 began
reporting the following errors:

    msm fd900000.mdss: pp done time out, lm=0

modetest from the libdrm tests reports that the page flips drop with
this issue present:

    $ modetest -v -s 32:1080x1920
    trying to open device 'msm'...done
    setting mode 1080x1920-71.71Hz@XR24 on connectors 32, crtc 50
    freq: 13.50Hz
    freq: 13.51Hz
    freq: 13.51Hz

This revert fixes the 'pp done time out' errors and gets the panel
running at the expected refresh rate again:

    $ modetest -v -s 32:1080x19
    trying to open device 'msm'...done
    setting mode 1080x1920-71.71Hz@XR24 on connectors 32, crtc 50
    failed to set gamma: Function not implemented
    freq: 59.40Hz
    freq: 59.69Hz
    freq: 59.69Hz

This isn't an ideal long-term solution. One possible fix is to enable
the autorefresh feature as described on this patch:

https://lore.kernel.org/lkml/20191230020053.26016-2-masneyb@onstation.org/

However the patch is not fully working as expected yet. More background
discussion is available at:

https://lore.kernel.org/dri-devel/20191105000129.GA6536@onstation.org/

Signed-off-by: Brian Masney <masneyb@onstation.org>
---
 drivers/gpu/drm/msm/Makefile                 |   1 -
 drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c     |  13 ++
 drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.c  |   7 +-
 drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.h  |   5 -
 drivers/gpu/drm/msm/disp/dpu1/dpu_kms.c      |  46 +++--
 drivers/gpu/drm/msm/msm_atomic.c             | 179 +------------------
 drivers/gpu/drm/msm/msm_atomic_trace.h       | 110 ------------
 drivers/gpu/drm/msm/msm_atomic_tracepoints.c |   3 -
 drivers/gpu/drm/msm/msm_drv.c                |   1 -
 drivers/gpu/drm/msm/msm_drv.h                |   4 -
 drivers/gpu/drm/msm/msm_gpu_trace.h          |   2 +-
 drivers/gpu/drm/msm/msm_kms.h                |  53 +-----
 12 files changed, 47 insertions(+), 377 deletions(-)
 delete mode 100644 drivers/gpu/drm/msm/msm_atomic_trace.h
 delete mode 100644 drivers/gpu/drm/msm/msm_atomic_tracepoints.c

diff --git a/drivers/gpu/drm/msm/Makefile b/drivers/gpu/drm/msm/Makefile
index 1579cf0d828f..7a05cbf2f820 100644
--- a/drivers/gpu/drm/msm/Makefile
+++ b/drivers/gpu/drm/msm/Makefile
@@ -75,7 +75,6 @@ msm-y := \
 	disp/dpu1/dpu_rm.o \
 	disp/dpu1/dpu_vbif.o \
 	msm_atomic.o \
-	msm_atomic_tracepoints.o \
 	msm_debugfs.o \
 	msm_drv.o \
 	msm_fb.o \
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c
index f197dce54576..3499ddf7782b 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_crtc.c
@@ -617,6 +617,7 @@ void dpu_crtc_commit_kickoff(struct drm_crtc *crtc)
 	struct dpu_crtc *dpu_crtc = to_dpu_crtc(crtc);
 	struct dpu_kms *dpu_kms = _dpu_crtc_get_kms(crtc);
 	struct dpu_crtc_state *cstate = to_dpu_crtc_state(crtc->state);
+	int ret;
 
 	/*
 	 * If no mixers has been allocated in dpu_crtc_atomic_check(),
@@ -636,6 +637,17 @@ void dpu_crtc_commit_kickoff(struct drm_crtc *crtc)
 				  crtc->state->encoder_mask)
 		dpu_encoder_prepare_for_kickoff(encoder);
 
+	/* wait for previous frame_event_done completion */
+	DPU_ATRACE_BEGIN("wait_for_frame_done_event");
+	ret = _dpu_crtc_wait_for_frame_done(crtc);
+	DPU_ATRACE_END("wait_for_frame_done_event");
+	if (ret) {
+		DPU_ERROR("crtc%d wait for frame done failed;frame_pending%d\n",
+				crtc->base.id,
+				atomic_read(&dpu_crtc->frame_pending));
+		goto end;
+	}
+
 	if (atomic_inc_return(&dpu_crtc->frame_pending) == 1) {
 		/* acquire bandwidth and other resources */
 		DPU_DEBUG("crtc%d first commit\n", crtc->base.id);
@@ -649,6 +661,7 @@ void dpu_crtc_commit_kickoff(struct drm_crtc *crtc)
 	drm_for_each_encoder_mask(encoder, crtc->dev, crtc->state->encoder_mask)
 		dpu_encoder_kickoff(encoder);
 
+end:
 	reinit_completion(&dpu_crtc->frame_done_comp);
 	DPU_ATRACE_END("crtc_commit");
 }
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.c
index f96e142c4361..7e7f63bf0b89 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.c
@@ -1664,7 +1664,8 @@ static u32 _dpu_encoder_calculate_linetime(struct dpu_encoder_virt *dpu_enc,
 	return line_time;
 }
 
-int dpu_encoder_vsync_time(struct drm_encoder *drm_enc, ktime_t *wakeup_time)
+static int _dpu_encoder_wakeup_time(struct drm_encoder *drm_enc,
+		ktime_t *wakeup_time)
 {
 	struct drm_display_mode *mode;
 	struct dpu_encoder_virt *dpu_enc;
@@ -1750,7 +1751,7 @@ static void dpu_encoder_vsync_event_work_handler(struct kthread_work *work)
 		return;
 	}
 
-	if (dpu_encoder_vsync_time(&dpu_enc->base, &wakeup_time))
+	if (_dpu_encoder_wakeup_time(&dpu_enc->base, &wakeup_time))
 		return;
 
 	trace_dpu_enc_vsync_event_work(DRMID(&dpu_enc->base), wakeup_time);
@@ -1824,7 +1825,7 @@ void dpu_encoder_kickoff(struct drm_encoder *drm_enc)
 	}
 
 	if (dpu_enc->disp_info.intf_type == DRM_MODE_ENCODER_DSI &&
-			!dpu_encoder_vsync_time(drm_enc, &wakeup_time)) {
+			!_dpu_encoder_wakeup_time(drm_enc, &wakeup_time)) {
 		trace_dpu_enc_early_kickoff(DRMID(drm_enc),
 					    ktime_to_ms(wakeup_time));
 		mod_timer(&dpu_enc->vsync_event_timer,
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.h b/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.h
index b4913465e602..8465b37adf3b 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.h
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_encoder.h
@@ -85,11 +85,6 @@ void dpu_encoder_trigger_kickoff_pending(struct drm_encoder *encoder);
  */
 void dpu_encoder_kickoff(struct drm_encoder *encoder);
 
-/**
- * dpu_encoder_wakeup_time - get the time of the next vsync
- */
-int dpu_encoder_vsync_time(struct drm_encoder *drm_enc, ktime_t *wakeup_time);
-
 /**
  * dpu_encoder_wait_for_event - Waits for encoder events
  * @encoder:	encoder pointer
diff --git a/drivers/gpu/drm/msm/disp/dpu1/dpu_kms.c b/drivers/gpu/drm/msm/disp/dpu1/dpu_kms.c
index 6c92f0fbeac9..6f8967eae78d 100644
--- a/drivers/gpu/drm/msm/disp/dpu1/dpu_kms.c
+++ b/drivers/gpu/drm/msm/disp/dpu1/dpu_kms.c
@@ -250,20 +250,6 @@ static void dpu_kms_disable_commit(struct msm_kms *kms)
 	pm_runtime_put_sync(&dpu_kms->pdev->dev);
 }
 
-static ktime_t dpu_kms_vsync_time(struct msm_kms *kms, struct drm_crtc *crtc)
-{
-	struct drm_encoder *encoder;
-
-	drm_for_each_encoder_mask(encoder, crtc->dev, crtc->state->encoder_mask) {
-		ktime_t vsync_time;
-
-		if (dpu_encoder_vsync_time(encoder, &vsync_time) == 0)
-			return vsync_time;
-	}
-
-	return ktime_get();
-}
-
 static void dpu_kms_prepare_commit(struct msm_kms *kms,
 		struct drm_atomic_state *state)
 {
@@ -290,16 +276,7 @@ static void dpu_kms_prepare_commit(struct msm_kms *kms,
 
 static void dpu_kms_flush_commit(struct msm_kms *kms, unsigned crtc_mask)
 {
-	struct dpu_kms *dpu_kms = to_dpu_kms(kms);
-	struct drm_crtc *crtc;
-
-	for_each_crtc_mask(dpu_kms->dev, crtc, crtc_mask) {
-		if (!crtc->state->active)
-			continue;
-
-		trace_dpu_kms_commit(DRMID(crtc));
-		dpu_crtc_commit_kickoff(crtc);
-	}
+	/* TODO */
 }
 
 /*
@@ -321,6 +298,25 @@ void dpu_kms_encoder_enable(struct drm_encoder *encoder)
 			continue;
 
 		trace_dpu_kms_enc_enable(DRMID(crtc));
+		dpu_crtc_commit_kickoff(crtc);
+	}
+}
+
+static void dpu_kms_commit(struct msm_kms *kms, struct drm_atomic_state *state)
+{
+	struct drm_crtc *crtc;
+	struct drm_crtc_state *crtc_state;
+	int i;
+
+	for_each_new_crtc_in_state(state, crtc, crtc_state, i) {
+		/* If modeset is required, kickoff is run in encoder_enable */
+		if (drm_atomic_crtc_needs_modeset(crtc_state))
+			continue;
+
+		if (crtc->state->active) {
+			trace_dpu_kms_commit(DRMID(crtc));
+			dpu_crtc_commit_kickoff(crtc);
+		}
 	}
 }
 
@@ -668,9 +664,9 @@ static const struct msm_kms_funcs kms_funcs = {
 	.irq             = dpu_irq,
 	.enable_commit   = dpu_kms_enable_commit,
 	.disable_commit  = dpu_kms_disable_commit,
-	.vsync_time      = dpu_kms_vsync_time,
 	.prepare_commit  = dpu_kms_prepare_commit,
 	.flush_commit    = dpu_kms_flush_commit,
+	.commit          = dpu_kms_commit,
 	.wait_flush      = dpu_kms_wait_flush,
 	.complete_commit = dpu_kms_complete_commit,
 	.enable_vblank   = dpu_kms_enable_vblank,
diff --git a/drivers/gpu/drm/msm/msm_atomic.c b/drivers/gpu/drm/msm/msm_atomic.c
index 5ccfad794c6a..517d3a747778 100644
--- a/drivers/gpu/drm/msm/msm_atomic.c
+++ b/drivers/gpu/drm/msm/msm_atomic.c
@@ -8,7 +8,6 @@
 #include <drm/drm_gem_framebuffer_helper.h>
 #include <drm/drm_vblank.h>
 
-#include "msm_atomic_trace.h"
 #include "msm_drv.h"
 #include "msm_gem.h"
 #include "msm_kms.h"
@@ -27,102 +26,6 @@ int msm_atomic_prepare_fb(struct drm_plane *plane,
 	return msm_framebuffer_prepare(new_state->fb, kms->aspace);
 }
 
-static void msm_atomic_async_commit(struct msm_kms *kms, int crtc_idx)
-{
-	unsigned crtc_mask = BIT(crtc_idx);
-
-	trace_msm_atomic_async_commit_start(crtc_mask);
-
-	mutex_lock(&kms->commit_lock);
-
-	if (!(kms->pending_crtc_mask & crtc_mask)) {
-		mutex_unlock(&kms->commit_lock);
-		goto out;
-	}
-
-	kms->pending_crtc_mask &= ~crtc_mask;
-
-	kms->funcs->enable_commit(kms);
-
-	/*
-	 * Flush hardware updates:
-	 */
-	trace_msm_atomic_flush_commit(crtc_mask);
-	kms->funcs->flush_commit(kms, crtc_mask);
-	mutex_unlock(&kms->commit_lock);
-
-	/*
-	 * Wait for flush to complete:
-	 */
-	trace_msm_atomic_wait_flush_start(crtc_mask);
-	kms->funcs->wait_flush(kms, crtc_mask);
-	trace_msm_atomic_wait_flush_finish(crtc_mask);
-
-	mutex_lock(&kms->commit_lock);
-	kms->funcs->complete_commit(kms, crtc_mask);
-	mutex_unlock(&kms->commit_lock);
-	kms->funcs->disable_commit(kms);
-
-out:
-	trace_msm_atomic_async_commit_finish(crtc_mask);
-}
-
-static enum hrtimer_restart msm_atomic_pending_timer(struct hrtimer *t)
-{
-	struct msm_pending_timer *timer = container_of(t,
-			struct msm_pending_timer, timer);
-	struct msm_drm_private *priv = timer->kms->dev->dev_private;
-
-	queue_work(priv->wq, &timer->work);
-
-	return HRTIMER_NORESTART;
-}
-
-static void msm_atomic_pending_work(struct work_struct *work)
-{
-	struct msm_pending_timer *timer = container_of(work,
-			struct msm_pending_timer, work);
-
-	msm_atomic_async_commit(timer->kms, timer->crtc_idx);
-}
-
-void msm_atomic_init_pending_timer(struct msm_pending_timer *timer,
-		struct msm_kms *kms, int crtc_idx)
-{
-	timer->kms = kms;
-	timer->crtc_idx = crtc_idx;
-	hrtimer_init(&timer->timer, CLOCK_MONOTONIC, HRTIMER_MODE_ABS);
-	timer->timer.function = msm_atomic_pending_timer;
-	INIT_WORK(&timer->work, msm_atomic_pending_work);
-}
-
-static bool can_do_async(struct drm_atomic_state *state,
-		struct drm_crtc **async_crtc)
-{
-	struct drm_connector_state *connector_state;
-	struct drm_connector *connector;
-	struct drm_crtc_state *crtc_state;
-	struct drm_crtc *crtc;
-	int i, num_crtcs = 0;
-
-	if (!(state->legacy_cursor_update || state->async_update))
-		return false;
-
-	/* any connector change, means slow path: */
-	for_each_new_connector_in_state(state, connector, connector_state, i)
-		return false;
-
-	for_each_new_crtc_in_state(state, crtc, crtc_state, i) {
-		if (drm_atomic_crtc_needs_modeset(crtc_state))
-			return false;
-		if (++num_crtcs > 1)
-			return false;
-		*async_crtc = crtc;
-	}
-
-	return true;
-}
-
 /* Get bitmask of crtcs that will need to be flushed.  The bitmask
  * can be used with for_each_crtc_mask() iterator, to iterate
  * effected crtcs without needing to preserve the atomic state.
@@ -144,29 +47,9 @@ void msm_atomic_commit_tail(struct drm_atomic_state *state)
 	struct drm_device *dev = state->dev;
 	struct msm_drm_private *priv = dev->dev_private;
 	struct msm_kms *kms = priv->kms;
-	struct drm_crtc *async_crtc = NULL;
 	unsigned crtc_mask = get_crtc_mask(state);
-	bool async = kms->funcs->vsync_time &&
-			can_do_async(state, &async_crtc);
-
-	trace_msm_atomic_commit_tail_start(async, crtc_mask);
 
 	kms->funcs->enable_commit(kms);
-
-	/*
-	 * Ensure any previous (potentially async) commit has
-	 * completed:
-	 */
-	trace_msm_atomic_wait_flush_start(crtc_mask);
-	kms->funcs->wait_flush(kms, crtc_mask);
-	trace_msm_atomic_wait_flush_finish(crtc_mask);
-
-	mutex_lock(&kms->commit_lock);
-
-	/*
-	 * Now that there is no in-progress flush, prepare the
-	 * current update:
-	 */
 	kms->funcs->prepare_commit(kms, state);
 
 	/*
@@ -176,72 +59,20 @@ void msm_atomic_commit_tail(struct drm_atomic_state *state)
 	drm_atomic_helper_commit_planes(dev, state, 0);
 	drm_atomic_helper_commit_modeset_enables(dev, state);
 
-	if (async) {
-		struct msm_pending_timer *timer =
-			&kms->pending_timers[drm_crtc_index(async_crtc)];
-
-		/* async updates are limited to single-crtc updates: */
-		WARN_ON(crtc_mask != drm_crtc_mask(async_crtc));
-
-		/*
-		 * Start timer if we don't already have an update pending
-		 * on this crtc:
-		 */
-		if (!(kms->pending_crtc_mask & crtc_mask)) {
-			ktime_t vsync_time, wakeup_time;
-
-			kms->pending_crtc_mask |= crtc_mask;
-
-			vsync_time = kms->funcs->vsync_time(kms, async_crtc);
-			wakeup_time = ktime_sub(vsync_time, ms_to_ktime(1));
-
-			hrtimer_start(&timer->timer, wakeup_time,
-					HRTIMER_MODE_ABS);
-		}
-
-		kms->funcs->disable_commit(kms);
-		mutex_unlock(&kms->commit_lock);
-
-		/*
-		 * At this point, from drm core's perspective, we
-		 * are done with the atomic update, so we can just
-		 * go ahead and signal that it is done:
-		 */
-		drm_atomic_helper_commit_hw_done(state);
-		drm_atomic_helper_cleanup_planes(dev, state);
-
-		trace_msm_atomic_commit_tail_finish(async, crtc_mask);
-
-		return;
-	}
-
-	/*
-	 * If there is any async flush pending on updated crtcs, fold
-	 * them into the current flush.
-	 */
-	kms->pending_crtc_mask &= ~crtc_mask;
-
 	/*
 	 * Flush hardware updates:
 	 */
-	trace_msm_atomic_flush_commit(crtc_mask);
+	if (kms->funcs->commit) {
+		DRM_DEBUG_ATOMIC("triggering commit\n");
+		kms->funcs->commit(kms, state);
+	}
 	kms->funcs->flush_commit(kms, crtc_mask);
-	mutex_unlock(&kms->commit_lock);
 
-	/*
-	 * Wait for flush to complete:
-	 */
-	trace_msm_atomic_wait_flush_start(crtc_mask);
 	kms->funcs->wait_flush(kms, crtc_mask);
-	trace_msm_atomic_wait_flush_finish(crtc_mask);
-
-	mutex_lock(&kms->commit_lock);
 	kms->funcs->complete_commit(kms, crtc_mask);
-	mutex_unlock(&kms->commit_lock);
 	kms->funcs->disable_commit(kms);
 
 	drm_atomic_helper_commit_hw_done(state);
-	drm_atomic_helper_cleanup_planes(dev, state);
 
-	trace_msm_atomic_commit_tail_finish(async, crtc_mask);
+	drm_atomic_helper_cleanup_planes(dev, state);
 }
diff --git a/drivers/gpu/drm/msm/msm_atomic_trace.h b/drivers/gpu/drm/msm/msm_atomic_trace.h
deleted file mode 100644
index b4ca0ed3b4a3..000000000000
--- a/drivers/gpu/drm/msm/msm_atomic_trace.h
+++ /dev/null
@@ -1,110 +0,0 @@
-/* SPDX-License-Identifier: GPL-2.0 */
-#if !defined(_MSM_GPU_TRACE_H_) || defined(TRACE_HEADER_MULTI_READ)
-#define _MSM_GPU_TRACE_H_
-
-#include <linux/tracepoint.h>
-
-#undef TRACE_SYSTEM
-#define TRACE_SYSTEM drm_msm_atomic
-#define TRACE_INCLUDE_FILE msm_atomic_trace
-
-TRACE_EVENT(msm_atomic_commit_tail_start,
-	    TP_PROTO(bool async, unsigned crtc_mask),
-	    TP_ARGS(async, crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(bool, async)
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->async = async;
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("async=%d crtc_mask=%x",
-		    __entry->async, __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_commit_tail_finish,
-	    TP_PROTO(bool async, unsigned crtc_mask),
-	    TP_ARGS(async, crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(bool, async)
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->async = async;
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("async=%d crtc_mask=%x",
-		    __entry->async, __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_async_commit_start,
-	    TP_PROTO(unsigned crtc_mask),
-	    TP_ARGS(crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("crtc_mask=%x",
-		    __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_async_commit_finish,
-	    TP_PROTO(unsigned crtc_mask),
-	    TP_ARGS(crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("crtc_mask=%x",
-		    __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_wait_flush_start,
-	    TP_PROTO(unsigned crtc_mask),
-	    TP_ARGS(crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("crtc_mask=%x",
-		    __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_wait_flush_finish,
-	    TP_PROTO(unsigned crtc_mask),
-	    TP_ARGS(crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("crtc_mask=%x",
-		    __entry->crtc_mask)
-);
-
-TRACE_EVENT(msm_atomic_flush_commit,
-	    TP_PROTO(unsigned crtc_mask),
-	    TP_ARGS(crtc_mask),
-	    TP_STRUCT__entry(
-		    __field(u32, crtc_mask)
-		    ),
-	    TP_fast_assign(
-		    __entry->crtc_mask = crtc_mask;
-		    ),
-	    TP_printk("crtc_mask=%x",
-		    __entry->crtc_mask)
-);
-
-#endif
-
-#undef TRACE_INCLUDE_PATH
-#define TRACE_INCLUDE_PATH ../../drivers/gpu/drm/msm
-#include <trace/define_trace.h>
diff --git a/drivers/gpu/drm/msm/msm_atomic_tracepoints.c b/drivers/gpu/drm/msm/msm_atomic_tracepoints.c
deleted file mode 100644
index 011dc881f391..000000000000
--- a/drivers/gpu/drm/msm/msm_atomic_tracepoints.c
+++ /dev/null
@@ -1,3 +0,0 @@
-// SPDX-License-Identifier: GPL-2.0
-#define CREATE_TRACE_POINTS
-#include "msm_atomic_trace.h"
diff --git a/drivers/gpu/drm/msm/msm_drv.c b/drivers/gpu/drm/msm/msm_drv.c
index 9be69338ddd8..ce18d38e3bb6 100644
--- a/drivers/gpu/drm/msm/msm_drv.c
+++ b/drivers/gpu/drm/msm/msm_drv.c
@@ -473,7 +473,6 @@ static int msm_drm_init(struct device *dev, struct drm_driver *drv)
 	ddev->mode_config.normalize_zpos = true;
 
 	if (kms) {
-		kms->dev = ddev;
 		ret = kms->funcs->hw_init(kms);
 		if (ret) {
 			DRM_DEV_ERROR(dev, "kms hw init failed: %d\n", ret);
diff --git a/drivers/gpu/drm/msm/msm_drv.h b/drivers/gpu/drm/msm/msm_drv.h
index 71547e756e29..1fa0974eb69f 100644
--- a/drivers/gpu/drm/msm/msm_drv.h
+++ b/drivers/gpu/drm/msm/msm_drv.h
@@ -221,12 +221,8 @@ struct msm_format {
 	uint32_t pixel_format;
 };
 
-struct msm_pending_timer;
-
 int msm_atomic_prepare_fb(struct drm_plane *plane,
 			  struct drm_plane_state *new_state);
-void msm_atomic_init_pending_timer(struct msm_pending_timer *timer,
-		struct msm_kms *kms, int crtc_idx);
 void msm_atomic_commit_tail(struct drm_atomic_state *state);
 struct drm_atomic_state *msm_atomic_state_alloc(struct drm_device *dev);
 void msm_atomic_state_clear(struct drm_atomic_state *state);
diff --git a/drivers/gpu/drm/msm/msm_gpu_trace.h b/drivers/gpu/drm/msm/msm_gpu_trace.h
index 122b84789238..1155118a27a1 100644
--- a/drivers/gpu/drm/msm/msm_gpu_trace.h
+++ b/drivers/gpu/drm/msm/msm_gpu_trace.h
@@ -5,7 +5,7 @@
 #include <linux/tracepoint.h>
 
 #undef TRACE_SYSTEM
-#define TRACE_SYSTEM drm_msm_gpu
+#define TRACE_SYSTEM drm_msm
 #define TRACE_INCLUDE_FILE msm_gpu_trace
 
 TRACE_EVENT(msm_gpu_submit,
diff --git a/drivers/gpu/drm/msm/msm_kms.h b/drivers/gpu/drm/msm/msm_kms.h
index 1cbef6b200b7..85264a2f1f6d 100644
--- a/drivers/gpu/drm/msm/msm_kms.h
+++ b/drivers/gpu/drm/msm/msm_kms.h
@@ -33,20 +33,6 @@ struct msm_kms_funcs {
 
 	/*
 	 * Atomic commit handling:
-	 *
-	 * Note that in the case of async commits, the funcs which take
-	 * a crtc_mask (ie. ->flush_commit(), and ->complete_commit())
-	 * might not be evenly balanced with ->prepare_commit(), however
-	 * each crtc that effected by a ->prepare_commit() (potentially
-	 * multiple times) will eventually (at end of vsync period) be
-	 * flushed and completed.
-	 *
-	 * This has some implications about tracking of cleanup state,
-	 * for example SMP blocks to release after commit completes.  Ie.
-	 * cleanup state should be also duplicated in the various
-	 * duplicate_state() methods, as the current cleanup state at
-	 * ->complete_commit() time may have accumulated cleanup work
-	 * from multiple commits.
 	 */
 
 	/**
@@ -59,14 +45,6 @@ struct msm_kms_funcs {
 	void (*enable_commit)(struct msm_kms *kms);
 	void (*disable_commit)(struct msm_kms *kms);
 
-	/**
-	 * If the kms backend supports async commit, it should implement
-	 * this method to return the time of the next vsync.  This is
-	 * used to determine a time slightly before vsync, for the async
-	 * commit timer to run and complete an async commit.
-	 */
-	ktime_t (*vsync_time)(struct msm_kms *kms, struct drm_crtc *crtc);
-
 	/**
 	 * Prepare for atomic commit.  This is called after any previous
 	 * (async or otherwise) commit has completed.
@@ -80,6 +58,9 @@ struct msm_kms_funcs {
 	 */
 	void (*flush_commit)(struct msm_kms *kms, unsigned crtc_mask);
 
+	/* TODO remove ->commit(), use ->flush_commit() instead: */
+	void (*commit)(struct msm_kms *kms, struct drm_atomic_state *state);
+
 	/**
 	 * Wait for any in-progress flush to complete on the specified
 	 * crtcs.  This should not block if there is no in-progress
@@ -128,48 +109,20 @@ struct msm_kms_funcs {
 #endif
 };
 
-struct msm_kms;
-
-/*
- * A per-crtc timer for pending async atomic flushes.  Scheduled to expire
- * shortly before vblank to flush pending async updates.
- */
-struct msm_pending_timer {
-	struct hrtimer timer;
-	struct work_struct work;
-	struct msm_kms *kms;
-	unsigned crtc_idx;
-};
-
 struct msm_kms {
 	const struct msm_kms_funcs *funcs;
-	struct drm_device *dev;
 
 	/* irq number to be passed on to drm_irq_install */
 	int irq;
 
 	/* mapper-id used to request GEM buffer mapped for scanout: */
 	struct msm_gem_address_space *aspace;
-
-	/*
-	 * For async commit, where ->flush_commit() and later happens
-	 * from the crtc's pending_timer close to end of the frame:
-	 */
-	struct mutex commit_lock;
-	unsigned pending_crtc_mask;
-	struct msm_pending_timer pending_timers[MAX_CRTCS];
 };
 
 static inline void msm_kms_init(struct msm_kms *kms,
 		const struct msm_kms_funcs *funcs)
 {
-	unsigned i;
-
-	mutex_init(&kms->commit_lock);
 	kms->funcs = funcs;
-
-	for (i = 0; i < ARRAY_SIZE(kms->pending_timers); i++)
-		msm_atomic_init_pending_timer(&kms->pending_timers[i], kms, i);
 }
 
 struct msm_kms *mdp4_kms_init(struct drm_device *dev);
-- 
2.24.1

